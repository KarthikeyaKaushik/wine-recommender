47,53,59,61,67,71,73,79,83,89,97),
c(2,4,8,16,32,64)
)
logsumexp <- function(x){
m <- max(x)
return(log(sum(exp(x-m)))+m)
}
data = c(10,20)
log.prior = rep(0, length(H))
log.likelihood = rep(NA, length(H))
for(i in 1:length(H)){
if (all(is.element(data, H[[i]]))){
log.likelihood[i] = -length(data) * log(length(H[[i]]))
}
else{
log.likelihood[i] = -Inf
}
}
log.posterior = log.prior + log.likelihood
log.posterior = log.posterior - logsumexp(log.posterior)
# 1.a metropolis sampler :
# the task is to sample between hypotheses, with the
# log.posterior acting as a proxy for f
samples = NULL
proposals = NULL
current = 1 # holds the current value of the hypothesis
# there's 10 hypotheses in all.
# the f here corresponds to the posterior prob
while (length(samples) < 1000){
proposed = sample(1:length(H), 1)
# accept the proposal with probability
# f(proposal)/f(current)
# if f(propoasl) > f(current), take it
# else take it with that probability !
if (log(runif(1)) < log.posterior[proposed] -
log.posterior[current]){
current = proposed}
# Warning : You should always keep current, because that will make
# sure you push it towards the max
samples = append(samples, current)
proposals = append(proposals, proposed)
}
# get rid of 50% of the samples
samples = samples[500:1000]
#hist(samples, freq=F, breaks = seq(1,10))
table(samples)
N = 100
H = list(seq(1,N,1),
seq(1,N,2),
seq(0,N,2),
seq(0,N,5),
seq(0,N,10),
seq(0,N,3),
seq(0,N,7),
seq(0,N,11),
c(1,4,9,16,25,36,49,64,81),
c(2,3,5,7,11,13,17,19,23,29,31,37,41,43,
47,53,59,61,67,71,73,79,83,89,97),
c(2,4,8,16,32,64)
)
logsumexp <- function(x){
m <- max(x)
return(log(sum(exp(x-m)))+m)
}
data = c(10,20)
log.prior = rep(0, length(H))
log.likelihood = rep(NA, length(H))
for(i in 1:length(H)){
if (all(is.element(data, H[[i]]))){
log.likelihood[i] = -length(data) * log(length(H[[i]]))
}
else{
log.likelihood[i] = -Inf
}
}
log.posterior = log.prior + log.likelihood
log.posterior = log.posterior - logsumexp(log.posterior)
# 1.a metropolis sampler :
# the task is to sample between hypotheses, with the
# log.posterior acting as a proxy for f
samples = NULL
proposals = NULL
current = 1 # holds the current value of the hypothesis
# there's 10 hypotheses in all.
# the f here corresponds to the posterior prob
while (length(samples) < 1000){
proposed = sample(1:length(H), 1)
# accept the proposal with probability
# f(proposal)/f(current)
# if f(propoasl) > f(current), take it
# else take it with that probability !
if (log(runif(1)) < log.posterior[proposed] -
log.posterior[current]){
current = proposed}
# Warning : You should always keep current, because that will make
# sure you push it towards the max
samples = append(samples, current)
proposals = append(proposals, proposed)
}
# get rid of 50% of the samples
samples = samples[500:1000]
#hist(samples, freq=F, breaks = seq(1,10))
df = as.data.frame(table(samples))
View(df)
remaining = c(1:10) - unique(df$samples)
unique(df$samples)
as.numeric(df$samples)
#hist(samples, freq=F, breaks = seq(1,10))
df = as.data.frame(table(samples, useNA = "ifany"))
View(df)
View(df)
#hist(samples, freq=F, breaks = seq(1,10))
df = as.data.frame(table(samples))
for (hyp in 1:10){
if (hyp !%in% df$samples){
for (hyp in 1:10){
if (hyp %!in% df$samples){
df = rbind(df, c(hyp, 0))
}
}
#hist(samples, freq=F, breaks = seq(1,10))
df = as.data.frame(table(samples))
for (hyp in 1:10){
if !(hyp %in% df$samples){
for (hyp in 1:10){
if ~(hyp %in% df$samples){
for (hyp in 1:10){
if (hyp %in% df$samples){
df = rbind(df, c(hyp, 0))
}
}
View(df)
#hist(samples, freq=F, breaks = seq(1,10))
df = as.data.frame(table(samples))
for (hyp in 1:10){
if (!(hyp %in% df$samples)){
df = rbind(df, c(hyp, 0))
}
}
View(df)
#hist(samples, freq=F, breaks = seq(1,10))
df = as.data.frame(table(samples))
for (hyp in 1:10){
if (!(hyp %in% df$samples)){
df = rbind(df, c(as.factor(hyp), 0))
}
}
View(df)
#hist(samples, freq=F, breaks = seq(1,10))
df = as.data.frame(table(samples))
df = as.numeric(df)
# get rid of 50% of the samples
samples = samples[500:1000]
N = 100
H = list(seq(1,N,1),
seq(1,N,2),
seq(0,N,2),
seq(0,N,5),
seq(0,N,10),
seq(0,N,3),
seq(0,N,7),
seq(0,N,11),
c(1,4,9,16,25,36,49,64,81),
c(2,3,5,7,11,13,17,19,23,29,31,37,41,43,
47,53,59,61,67,71,73,79,83,89,97),
c(2,4,8,16,32,64)
)
logsumexp <- function(x){
m <- max(x)
return(log(sum(exp(x-m)))+m)
}
data = c(10,20)
log.prior = rep(0, length(H))
log.likelihood = rep(NA, length(H))
for(i in 1:length(H)){
if (all(is.element(data, H[[i]]))){
log.likelihood[i] = -length(data) * log(length(H[[i]]))
}
else{
log.likelihood[i] = -Inf
}
}
log.posterior = log.prior + log.likelihood
log.posterior = log.posterior - logsumexp(log.posterior)
# 1.a metropolis sampler :
# the task is to sample between hypotheses, with the
# log.posterior acting as a proxy for f
samples = NULL
proposals = NULL
current = 1 # holds the current value of the hypothesis
# there's 10 hypotheses in all.
# the f here corresponds to the posterior prob
while (length(samples) < 1000){
proposed = sample(1:length(H), 1)
# accept the proposal with probability
# f(proposal)/f(current)
# if f(propoasl) > f(current), take it
# else take it with that probability !
if (log(runif(1)) < log.posterior[proposed] -
log.posterior[current]){
current = proposed}
# Warning : You should always keep current, because that will make
# sure you push it towards the max
samples = append(samples, current)
proposals = append(proposals, proposed)
}
# get rid of 50% of the samples
samples = samples[500:1000]
#hist(samples, freq=F, breaks = seq(1,10))
df = as.data.frame(table(samples))
df$samples = as.numeric(df$samples)
View(df)
#hist(samples, freq=F, breaks = seq(1,10))
df = as.data.frame(as.numeric(table(samples)))
View(df)
#hist(samples, freq=F, breaks = seq(1,10))
df = as.data.frame(table(samples))
View(df)
N = 100
H = list(seq(1,N,1),
seq(1,N,2),
seq(0,N,2),
seq(0,N,5),
seq(0,N,10),
seq(0,N,3),
seq(0,N,7),
seq(0,N,11),
c(1,4,9,16,25,36,49,64,81),
c(2,3,5,7,11,13,17,19,23,29,31,37,41,43,
47,53,59,61,67,71,73,79,83,89,97),
c(2,4,8,16,32,64)
)
logsumexp <- function(x){
m <- max(x)
return(log(sum(exp(x-m)))+m)
}
data = c(10,20)
log.prior = rep(0, length(H))
log.likelihood = rep(NA, length(H))
for(i in 1:length(H)){
if (all(is.element(data, H[[i]]))){
log.likelihood[i] = -length(data) * log(length(H[[i]]))
}
else{
log.likelihood[i] = -Inf
}
}
log.posterior = log.prior + log.likelihood
log.posterior = log.posterior - logsumexp(log.posterior)
# 1.a metropolis sampler :
# the task is to sample between hypotheses, with the
# log.posterior acting as a proxy for f
samples = NULL
proposals = NULL
current = 1 # holds the current value of the hypothesis
# there's 10 hypotheses in all.
# the f here corresponds to the posterior prob
while (length(samples) < 1000){
proposed = sample(1:length(H), 1)
# accept the proposal with probability
# f(proposal)/f(current)
# if f(propoasl) > f(current), take it
# else take it with that probability !
if (log(runif(1)) < log.posterior[proposed] -
log.posterior[current]){
current = proposed}
# Warning : You should always keep current, because that will make
# sure you push it towards the max
samples = append(samples, current)
proposals = append(proposals, proposed)
}
# get rid of 50% of the samples
samples = samples[500:1000]
#hist(samples, freq=F, breaks = seq(1,10))
df = as.data.frame(table(samples))
df$samples = as.numeric(df$samples)
View(df)
N = 100
H = list(seq(1,N,1),
seq(1,N,2),
seq(0,N,2),
seq(0,N,5),
seq(0,N,10),
seq(0,N,3),
seq(0,N,7),
seq(0,N,11),
c(1,4,9,16,25,36,49,64,81),
c(2,3,5,7,11,13,17,19,23,29,31,37,41,43,
47,53,59,61,67,71,73,79,83,89,97),
c(2,4,8,16,32,64)
)
logsumexp <- function(x){
m <- max(x)
return(log(sum(exp(x-m)))+m)
}
data = c(10,20)
log.prior = rep(0, length(H))
log.likelihood = rep(NA, length(H))
for(i in 1:length(H)){
if (all(is.element(data, H[[i]]))){
log.likelihood[i] = -length(data) * log(length(H[[i]]))
}
else{
log.likelihood[i] = -Inf
}
}
log.posterior = log.prior + log.likelihood
log.posterior = log.posterior - logsumexp(log.posterior)
# 1.a metropolis sampler :
# the task is to sample between hypotheses, with the
# log.posterior acting as a proxy for f
samples = NULL
proposals = NULL
current = 1 # holds the current value of the hypothesis
# there's 10 hypotheses in all.
# the f here corresponds to the posterior prob
while (length(samples) < 1000){
proposed = sample(1:length(H), 1)
# accept the proposal with probability
# f(proposal)/f(current)
# if f(propoasl) > f(current), take it
# else take it with that probability !
if (log(runif(1)) < log.posterior[proposed] -
log.posterior[current]){
current = proposed}
# Warning : You should always keep current, because that will make
# sure you push it towards the max
samples = append(samples, current)
proposals = append(proposals, proposed)
}
# get rid of 50% of the samples
samples = samples[500:1000]
#hist(samples, freq=F, breaks = seq(1,10))
df = as.data.frame(table(samples))
View(df)
#df$samples = as.numeric(df$samples)
for (hyp in 1:10){
if (!(hyp %in% df$samples)){
df = rbind(df, c(hyp, 0))
}
}
View(df)
#hist(samples, freq=F, breaks = seq(1,10))
df = as.data.frame(table(samples))
df$samples = as.character(df$samples)
View(df)
#hist(samples, freq=F, breaks = seq(1,10))
df = as.data.frame(table(samples))
df$samples = as.numeric(as.character(df$samples))
View(df)
for (hyp in 1:10){
if (!(hyp %in% df$samples)){
df = rbind(df, c(hyp, 0))
}
}
View(df)
ggplot(data=df, aes(x=samples, y=freq)) + geom_bar()
plt = ggplot(data=df, aes(x=samples, y=freq)) + geom_bar()
library(ggplot2)
ggplot(data=df, aes(x=samples, y=freq)) + geom_bar()
View(df)
ggplot(data=df, aes(x=samples, y=Freq)) + geom_bar()
ggplot(data=df, aes(x=samples)) + geom_bar()
help(geom_bar)
ggplot(data=df, aes(x=samples)) + geom_bar(fill=Freq)
View(df)
View(df)
ggplot(data=df) + geom_bar(x=samples, fill=Freq)
t = ggplot(data=df) + geom_bar(x=samples, fill=Freq)
plot(t)
t = ggplot(data=df) + geom_bar(x=samples, fill=Freq)
t = ggplot(data=df) + geom_bar(x=samples)
t
t = ggplot(data=df) + geom_bar(x=samples, y=Freq)
View(df)
colnames(df) = c('Hypothesis', 'Frequency')
t = ggplot(data=df) + geom_bar(x=Hypothesis, y=Frequency)
View(df)
df = as.data.frame(df)
t = ggplot(data=df) + geom_bar(x=Hypothesis, y=Frequency)
t = ggplot(data=df) + geom_bar(aes(x=Hypothesis, y=Frequency))
t
t = ggplot(data=df) + geom_bar(aes(x=Hypothesis, fill=Frequency))
t
t = ggplot(data=df, aes(x=Hypothesis, y=Frequency)) + geom_bar(stat='identity')
t
ggplot(data=df, aes(x=Hypothesis, y=Frequency)) + geom_bar(stat='identity')
ggplot(data=df, aes(x=Hypothesis, y=Frequency)) + geom_bar(stat='identity') + theme_bw()
help(theme)
ggplot(data=df, aes(x=Hypothesis, y=Frequency)) + geom_bar(stat='identity') + theme_bw(axis.ticks.x = seq(1,10))
ggplot(data=df, aes(x=Hypothesis, y=Frequency)) + geom_bar(stat='identity') +
theme_bw(axis.ticks.x = seq(1,10))
ggplot(data=df, aes(x=Hypothesis, y=Frequency)) + geom_bar(stat='identity') +
theme(axis.ticks.x = seq(1,10)) + theme_bw()
ggplot(data=df, aes(x=Hypothesis, y=Frequency)) + geom_bar(stat='identity') +
theme(axis.ticks.x = seq(1,10,1)) + theme_bw()
library(ggplot2)
library(viridis)
library(gridExtra)
library(data.table)
library(matrixStats)
library(ggrepel)
homophily_df = read.table(file.path('results','homophily','both',
'individual.csv'),header=TRUE,sep=',')
setwd("~/Documents/Documents/projects/wine-recommender")
library(ggplot2)
library(viridis)
library(grid)
library(gridExtra)
library(dplyr)
library(matrixStats)
library(ggrepel)
library(tidyr)
library(png)
NUM_EXPERTS = 14
NUM_AMATEURS = 120
NUM_TOTAL = 134
COLOR_START = 0.75
COLOR_END = 0.1
k = c(1,2,3,5,7,9,11,13,17,19,23,29,50,75,100,125,NUM_EXPERTS+NUM_AMATEURS-1)
rho = c(0,0.25,0.5,0.75,1,1.25,1.5)
#### Supplementary figures : figure 11-12 ####
homophily_df = read.table(file.path('results',
'influence.csv'),header=TRUE,sep=',')
homophily_df = subset(homophily_df, select = -c(X) )
top_panel = homophily_df
top_panel$group = as.character(homophily_df$group)
top_panel = top_panel %>% mutate(group = replace(group, group == 'experts', 'Critcs'))
top_panel = top_panel %>% mutate(group = replace(group, group == 'amateurs', 'Amateurs'))
top_panel = top_panel %>% mutate(method = replace(method, method == 'Potential influence', 'Recommender potential'))
top_panel = top_panel %>% mutate(method = replace(method, method == 'Real influence', 'Recommender influence'))
counts = rep(c(NUM_EXPERTS, NUM_AMATEURS), nrow(top_panel)/2)
fig_11_12 = ggplot(top_panel, aes(x=kval, y=proportion_per_capita)) +
geom_hline(aes(yintercept=baseline_1),linetype="dashed") +
geom_line(aes(group=rhoval,color=as.factor(rhoval))) +
scale_colour_viridis_d(option='F',name='rho',begin=0.0, end=0.75) +
ylim(0,0.07) + labs(x='Number of neighbours (k)', y='Influence') +
facet_grid(cols = vars(group),
rows = vars(method)) +  theme_bw() +
theme(aspect.ratio = .75, legend.position=c(.075,.85))
addSmallLegend <- function(myPlot, pointSize = 1.25, textSize = 7, spaceLegend = 0.3) {
myPlot +
guides(shape = guide_legend(override.aes = list(size = pointSize)),
color = guide_legend(override.aes = list(size = pointSize), reverse=TRUE)) +
theme(legend.title = element_text(size = textSize),
legend.text  = element_text(size = textSize),
legend.key.size = unit(spaceLegend, "lines"))
}
fig_11_12 = addSmallLegend(fig_11_12)
fig_11_12
#### Supplementary figures : figure 11-12 ####
homophily_df = read.table(file.path('results',
'influence.csv'),header=TRUE,sep=',')
homophily_df = subset(homophily_df, select = -c(X) )
top_panel = homophily_df
top_panel$group = as.character(homophily_df$group)
top_panel = top_panel %>% mutate(group = replace(group, group == 'experts', 'Critcs'))
top_panel = top_panel %>% mutate(group = replace(group, group == 'amateurs', 'Amateurs'))
top_panel = top_panel %>% mutate(method = replace(method, method == 'Potential influence', 'Recommender potential'))
top_panel = top_panel %>% mutate(method = replace(method, method == 'Real influence', 'Recommender influence'))
top_panel$method = factor(top_panel, levels=c('Recommender potential', 'Recommender influence'))
counts = rep(c(NUM_EXPERTS, NUM_AMATEURS), nrow(top_panel)/2)
fig_11_12 = ggplot(top_panel, aes(x=kval, y=proportion_per_capita)) +
geom_hline(aes(yintercept=baseline_1),linetype="dashed") +
geom_line(aes(group=rhoval,color=as.factor(rhoval))) +
scale_colour_viridis_d(option='F',name='rho',begin=0.0, end=0.75) +
ylim(0,0.07) + labs(x='Number of neighbours (k)', y='Influence') +
facet_grid(cols = vars(group),
rows = vars(method)) +  theme_bw() +
theme(aspect.ratio = .75, legend.position=c(.075,.85))
addSmallLegend <- function(myPlot, pointSize = 1.25, textSize = 7, spaceLegend = 0.3) {
myPlot +
guides(shape = guide_legend(override.aes = list(size = pointSize)),
color = guide_legend(override.aes = list(size = pointSize), reverse=TRUE)) +
theme(legend.title = element_text(size = textSize),
legend.text  = element_text(size = textSize),
legend.key.size = unit(spaceLegend, "lines"))
}
fig_11_12 = addSmallLegend(fig_11_12)
fig_11_12
#### Supplementary figures : figure 11-12 ####
homophily_df = read.table(file.path('results',
'influence.csv'),header=TRUE,sep=',')
homophily_df = subset(homophily_df, select = -c(X) )
top_panel = homophily_df
top_panel$group = as.character(homophily_df$group)
top_panel = top_panel %>% mutate(group = replace(group, group == 'experts', 'Critcs'))
top_panel = top_panel %>% mutate(group = replace(group, group == 'amateurs', 'Amateurs'))
top_panel = top_panel %>% mutate(method = replace(method, method == 'Potential influence', 'Recommender potential'))
top_panel = top_panel %>% mutate(method = replace(method, method == 'Real influence', 'Recommender influence'))
top_panel$method = factor(top_panel$method, levels=c('Recommender potential', 'Recommender influence'))
counts = rep(c(NUM_EXPERTS, NUM_AMATEURS), nrow(top_panel)/2)
fig_11_12 = ggplot(top_panel, aes(x=kval, y=proportion_per_capita)) +
geom_hline(aes(yintercept=baseline_1),linetype="dashed") +
geom_line(aes(group=rhoval,color=as.factor(rhoval))) +
scale_colour_viridis_d(option='F',name='rho',begin=0.0, end=0.75) +
ylim(0,0.07) + labs(x='Number of neighbours (k)', y='Influence') +
facet_grid(cols = vars(group),
rows = vars(method)) +  theme_bw() +
theme(aspect.ratio = .75, legend.position=c(.075,.85))
addSmallLegend <- function(myPlot, pointSize = 1.25, textSize = 7, spaceLegend = 0.3) {
myPlot +
guides(shape = guide_legend(override.aes = list(size = pointSize)),
color = guide_legend(override.aes = list(size = pointSize), reverse=TRUE)) +
theme(legend.title = element_text(size = textSize),
legend.text  = element_text(size = textSize),
legend.key.size = unit(spaceLegend, "lines"))
}
fig_11_12 = addSmallLegend(fig_11_12)
fig_11_12
ggsave(file.path('results','visualization', 'fig_11_12.png'), scale=0.7)
knitr::plot_crop(file.path('results','visualization', 'fig_11_12.png'))
